plugins {
	id("java")
	id("net.auoeke.gronk").version("4.+")
	id("com.github.johnrengelman.shadow").version("latest.release")
	id("dev.architectury.loom").version("latest.release")
}

group("net.auoeke")
version("3.5.0")
javaVersion(17)

defaultTasks("genSources")

final versions = [
	minecraft: "1.19.2",
	yarn: "28"
]

gronk {
	uncheck()
}

sourceSets {
	main {
		java {
			srcDirs = ["."]
			include("soulboundarmory/")
		}

		resources {
			include("assets/", "META-INF/", "pack.mcmeta", "*.json")
			exclude("**/*.xcf")
		}
	}

	dev {
		java {
			srcDirs = ["."]
			include("dev/")
		}

		compileClasspath += main.compileClasspath + main.output
	}
}

configurations {
	lib {
		forgeDependencies.extendsFrom(it)
	}
}

shadowJar {
	assemble.dependsOn(it)
	destinationDirectory.set(file("build/devlibs"))
	configurations = [project.configurations.lib]
}

remapJar {
	inputFile = shadowJar.archiveFile
}

dependencies {
	minecraft("com.mojang:minecraft:" + versions.minecraft)
	mappings("net.fabricmc:yarn:${versions.minecraft}+build.${versions.yarn}:v2")
	forge("net.minecraftforge:forge:${versions.minecraft}-+")

	annotationProcessor("net.auoeke:dycon-javac")
	compileOnly("net.auoeke:dycon")

	lib(
		"net.auoeke:structured-properties",
		"net.auoeke:reflect",
		"net.auoeke:romeral",
		"net.auoeke:unsafe"
	)
}

tasks.withType(JavaCompile) {
	options.compilerArgs << "-nowarn"
}

processResources {
	filesMatching("META-INF/mods.toml") {
		filter(line -> line.replace("0VERSION", version as String).replaceFirst(/#.*/, ""))
	}
}

tasks.findByName("ideaSyncTask")?.tap {
	dependsOn("genSources")
}

afterEvaluate {
	if (tasks.findByName("genSourcesWithCfr")) {
		tasks.withType(genSourcesWithCfr.class) {
			final marker = new File(outputJar.asFile.get().parentFile, project.name + "-marker")
			onlyIf {!marker.exists()}

			doLast {
				marker.createNewFile()
			}
		}

		unpickJar {
			onlyIf {!outputJar.asFile.get().exists()}
		}

		genSources {
			dependsOn = [genSourcesWithFernFlower]
		}
	}
}

loom {
	forge.mixinConfig(
		"soulbound-armory.mixins.json",
		"soulbound-armory.components.mixins.json",
		"soulbound-armory.text.mixins.json"
	)

	if (Boolean.getBoolean("idea.sync.active")) {
		delete(".idea/runConfigurations")

		// `RunConfigSettings` has a property `project`—which is null—so store the actual project here.
		final project = this.project

		runs {
			client2 {
				evaluateLater {
					inherit(client)
					programArgs.addAll(["--username", "Dev2"])
				}
			}

			all {run ->
				run.vmArgs.addAll(["-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition", "-Xss288K", "-Dmixin.hotSwap=true"])

				net.auoeke.reflect.Accessor.putReference(run, "environmentVariables", new HashMap<String, String>() {
					String put(String key, String value) {
						// Ignore Gradle's output because it interferes even if it is last.
						return key == "MOD_CLASSES" && this[key] ? null : super.put(key, value)
					}
				// Use IntelliJ IDEA's output.
				}.tap {it["MOD_CLASSES"] = ["main", "dev"]*.with {"main%%" + file("out/production/$project.name.$it")}.join(File.pathSeparator)})
			}
		}
	}
}
